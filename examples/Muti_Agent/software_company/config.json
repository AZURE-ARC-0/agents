{   "config":{
    "API_KEY" : "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",
    "PROXY" : "http://127.0.0.1:7000",
    "MAX_CHAT_HISTORY" : "1000"
    },
    "LLM_type": "OpenAI",
    "LLM": {
        "temperature": 0.3,
        "model": "gpt-3.5-turbo-16k-0613",
        "log_path": "logs/god"
    },
    "root": "design_state",
    "relations": {
        "design_state": {
            "0": "design_state",
            "1": "develop_state"
        },
        "develop_state": {
            "0": "develop_state",
            "1": "debug_state"
        },
        "debug_state": {
            "0": "debug_state",
            "1": "end_state"
        }
    },
    "agents": {
        "Alice": {
            "style": "august",
            "roles": {
                "design_state": "Boss",
                "develop_state": "Boss",
                "debug_state": "Boss"
            }
        },
        "Bob": {
            "style": "professional",
            "roles": {
                "design_state": "Architect_1"
            }
        },
        "Belle": {
            "style": "professional",
            "roles": {
                "design_state": "Architect_2"
            }
        },
        "Candy": {
            "style": "professional",
            "roles": {
                "develop_state": "Developer_1",
                "debug_state": "Developer_1"
            }
        },
        "Carl": {
            "style": "professional",
            "roles": {
                "develop_state": "Developer_2",
                "debug_state": "Developer_2"
            }
        },
        "David": {
            "style": "professional",
            "roles": {
                "debug_state": "Debugger"
            }
        },
        "Eva": {
            "style": "professional",
            "roles": {
                "debug_state": "Coder"
            }
        },
        "Michael": {
            "style": "professional",
            "roles": {
                "design_state": "Leader",
                "develop_state": "Leader",
                "debug_state": "Leader"
            }
        }
    },
    "states": {
        "end_state": {
            "name": "end_state"
        },
        "design_state": {
            "LLM_type": "OpenAI",
            "LLM": {
                "temperature": 0.3,
                "model": "gpt-3.5-turbo-16k-0613",
                "log_path": "logs/god"
            },
            "roles": [
                "Boss",
                "Architect_1",
                "Leader",
                "Architect_2"
            ],
            "controller": {
                "controller_type": "order",
                "max_chat_nums": 4,
                "judge_system_prompt": "",
                "judge_last_prompt": "",
                "judge_extract_words": "end"
            },
            "environment_prompt": "Imagine a scenario where the boss has presented a requirement. The architect is tasked with proposing a Python framework based on this requirement. The leader's role is to provide feedback on the architect's proposal, and another architect will finalize the framework based on the leader's comments.",
            "name": "design_state",
            "begin_role": "Boss",
            "begin_query": "write a snake game with python.",
            "agent_states": {
                "Boss": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Boss"
                    },
                    "style": {
                        "role": "Boss",
                        "style": "august"
                    },
                    "task": {
                        "task": "give a requirement"
                    },
                    "rule": {
                        "rule": "the requirement should be clear and specific"
                    }
                },
                "Architect_1": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Architect"
                    },
                    "style": {
                        "role": "Architect",
                        "style": "professional"
                    },
                    "task": {
                        "task": "design a concise, usable, and complete Python system architecture"
                    },
                    "rule": {
                        "rule": "try to specify good open-source tools and be specific about proposed modules"
                    }
                },
                "Leader": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Leader"
                    },
                    "style": {
                        "role": "Leader",
                        "style": "professional"
                    },
                    "task": {
                        "task": "evaluate the architecture proposal and provide specific feedback for improvement"
                    },
                    "rule": {
                        "rule": "feedback should be specific and constructive"
                    }
                },
                "Architect_2": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Architect"
                    },
                    "style": {
                        "role": "Architect_2",
                        "style": "professional"
                    },
                    "task": {
                        "task": "modify the designed system based on the feedback received"
                    },
                    "rule": {
                        "rule": "try to specify good open-source tools and be specific about proposed modules. Only output the modified system"
                    },
                    "ExtractComponent": {
                        "extract_words": [
                            "system"
                        ],
                        "system_prompt": "Please extract the modified system as completely as possible.",
                        "last_prompt": ""
                    }
                }
            }
        },
        "develop_state": {
            "LLM_type": "OpenAI",
            "LLM": {
                "temperature": 0.3,
                "model": "gpt-3.5-turbo-16k-0613",
                "log_path": "logs/god"
            },
            "roles": [
                "Boss",
                "Developer_1",
                "Leader",
                "Developer_2"
            ],
            "controller": {
                "controller_type": "order",
                "max_chat_nums": 5,
                "judge_system_prompt": "",
                "judge_last_prompt": "",
                "judge_extract_words": "end"
            },
            "environment_prompt": "In this scenario, the boss has provided a requirement. The developer's task is to write code based on the architecture proposed by the architect. The leader evaluates the written code for elegance, readability, and functionality, providing feedback. Another developer makes necessary modifications to the code.",
            "name": "develop_state",
            "begin_role": "Boss",
            "begin_query": "Please write code for a snake game with python..",
            "agent_states": {
                "Boss": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Boss"
                    },
                    "style": {
                        "role": "Boss",
                        "style": "august"
                    },
                    "task": {
                        "task": "give a requirement"
                    },
                    "rule": {
                        "rule": "the requirement should be clear and specific."
                    }
                },
                "Developer_1": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Developer"
                    },
                    "style": {
                        "role": "Developer",
                        "style": "professional"
                    },
                    "task": {
                        "task": "write elegant, readable, extensible, and efficient code"
                    },
                    "rule": {
                        "rule": "write code that conforms to standards like PEP8, is modular, easy to read, and maintainable. Output the code only"
                    },
                    "CustomizeComponent": {
                        "template": "You need to write code based on the following framework: {system}",
                        "keywords": [
                            "system"
                        ]
                    }
                },
                "Leader": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Leader"
                    },
                    "style": {
                        "role": "Leader",
                        "style": "professional"
                    },
                    "task": {
                        "task": "evaluate the code and provide specific feedback for improvement"
                    },
                    "rule": {
                        "rule": "feedback should be specific and constructive."
                    }
                },
                "Developer_2": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Developer"
                    },
                    "style": {
                        "role": "Developer",
                        "style": "professional"
                    },
                    "task": {
                        "task": "make modifications to the code based on feedback"
                    },
                    "rule": {
                        "rule": "make code modifications that conform to standards like PEP8, are modular, easy to read, and maintainable. Output the modified code only"
                    },
                    "ExtractComponent": {
                        "extract_words": [
                            "code"
                        ],
                        "system_prompt": "Please extract the modified code as completely as possible.",
                        "last_prompt": ""
                    }
                }
            }
        },
        "debug_state": {
            "LLM_type": "OpenAI",
            "LLM": {
                "temperature": 0.3,
                "model": "gpt-3.5-turbo-16k-0613",
                "log_path": "logs/god"
            },
            "roles": [
                "Boss",
                "Debugger",
                "Developer_1",
                "Leader",
                "Developer_2",
                "Coder"
            ],
            "controller": {
                "controller_type": "order",
                "max_chat_nums": 6,
                "judge_system_prompt": "",
                "judge_last_prompt": "",
                "judge_extract_words": "end"
            },
            "environment_prompt": "In this scenario, the boss has provided a requirement. The debugger simulates a compiler to determine whether the code is runnable and provides feedback. The developer writes code based on the debugger's feedback. The leader evaluates whether the final code meets the boss's requirements and provides feedback for further modifications. The coder writes the final code to a file.",
            "name": "debug_state",
            "begin_role": "Boss",
            "begin_query": "Please make the code both runnable and more efficient.",
            "agent_states": {
                "Boss": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Boss"
                    },
                    "style": {
                        "role": "Boss",
                        "style": "august"
                    },
                    "task": {
                        "task": "give a requirement"
                    },
                    "rule": {
                        "rule": "The requirement should be clear and specific."
                    }
                },
                "Debugger": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Debugger"
                    },
                    "style": {
                        "role": "Debugger",
                        "style": "professional"
                    },
                    "task": {
                        "task": "simulate a compiler and debug the code"
                    },
                    "rule": {
                        "rule": "provide corrections for reported errors or specific comments for code improvement"
                    },
                    "CustomizeComponent": {
                        "template": "You need to debug the following code: {code}",
                        "keywords": [
                            "code"
                        ]
                    }
                },
                "Developer_1": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Developer"
                    },
                    "style": {
                        "role": "Developer",
                        "style": "professional"
                    },
                    "task": {
                        "task": "write elegant, readable, extensible, and efficient code."
                    },
                    "rule": {
                        "rule": "write code that conforms to standards like PEP8, is modular, easy to read, and maintainable."
                    }
                },
                "Leader": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Leader"
                    },
                    "style": {
                        "role": "Leader",
                        "style": "professional"
                    },
                    "task": {
                        "task": "evaluate the code and provide specific feedback until satisfied"
                    },
                    "rule": {
                        "rule": "feedback should be specific and constructive"
                    }
                },
                "Developer_2": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Developer"
                    },
                    "style": {
                        "role": "Developer",
                        "style": "professional"
                    },
                    "task": {
                        "task": "make modifications to the code based on feedback"
                    },
                    "rule": {
                        "rule": "make code modifications that conform to standards like PEP8, are modular, easy to read, and maintainable. Output the modified code only"
                    },
                    "ExtractComponent": {
                        "extract_words": [
                            "code"
                        ],
                        "system_prompt": "Please extract the modified code as completely as possible.",
                        "last_prompt": ""
                    }
                },
                "Coder": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Coder"
                    },
                    "style": {
                        "role": "Coder",
                        "style": "professional"
                    },
                    "CodeComponent": {
                        "file_name": "rps_game.py",
                        "keyword": "code"
                    }
                }
            }
        }
    }
}