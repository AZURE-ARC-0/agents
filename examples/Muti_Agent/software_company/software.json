{
    "LLM_type": "OpenAI",
    "LLM": {
        "temperature": 0.3,
        "model": "gpt-3.5-turbo-16k-0613",
        "log_path": "logs/god"
    },
    "root": "design_state",
    "relations": {
        "design_state": {
            "0": "design_state",
            "1": "develop_state"
        },
        "develop_state": {
            "0": "develop_state",
            "1": "debug_state"
        },
        "debug_state": {
            "0": "debug_state",
            "1": "end_state"
        }
    },
    "agents": {
        "Alice": {
            "style": "august",
            "roles": {
                "design_state": "Boss",
                "develop_state": "Boss",
                "debug_state": "Boss"
            }
        },
        "Bob": {
            "style": "professional",
            "roles": {
                "design_state": "Architect_1"
            }
        },
        "Belle": {
            "style": "professional",
            "roles": {
                "design_state": "Architect_2"
            }
        },
        "Candy": {
            "style": "professional",
            "roles": {
                "develop_state": "Developer_1",
                "debug_state": "Developer_1"
            }
        },
        "Carl": {
            "style": "professional",
            "roles": {
                "develop_state": "Developer_2",
                "debug_state": "Developer_2"
            }
        },
        "David": {
            "style": "professional",
            "roles": {
                "debug_state": "Debugger"
            }
        },
        "Eva": {
            "style": "professional",
            "roles": {
                "debug_state": "Coder"
            }
        },
        "Michael": {
            "style": "professional",
            "roles": {
                "design_state": "Leader",
                "develop_state": "Leader",
                "debug_state": "Leader"
            }
        }
    },
    "states": {
        "end_state": {
            "name": "end_state"
        },
        "design_state": {
            "LLM_type": "OpenAI",
            "LLM": {
                "temperature": 0.3,
                "model": "gpt-3.5-turbo-16k-0613",
                "log_path": "logs/god"
            },
            "roles": [
                "Boss",
                "Architect_1",
                "Leader",
                "Architect_2"
            ],
            "controller": {
                "controller_type": "order",
                "max_chat_nums": 4,
                "judge_system_prompt": "",
                "judge_last_prompt": "",
                "judge_extract_words": "end"
            },
            "environment_prompt": "Now the scenario is that the boss puts forward a requirement, the architect puts forward a python framework based on this requirement, and then the leader determines gives the architect comments, another architect completes the final framework based on the comments",
            "name": "design_state",
            "begin_role": "Boss",
            "begin_query": "write a CLI rock-paper-scissors game, which can be played by two people.",
            "agent_states": {
                "Boss": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Boss"
                    },
                    "style": {
                        "role": "Boss",
                        "style": "august"
                    },
                    "task": {
                        "task": "give a requirement"
                    },
                    "rule": {
                        "rule": "requirement should be clear and specific"
                    }
                },
                "Architect_1": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Architect"
                    },
                    "style": {
                        "role": "Architect",
                        "style": "professional"
                    },
                    "task": {
                        "task": "design a concise, usable, complete python system architecture"
                    },
                    "rule": {
                        "rule": "try to specify good open source tools as much as possible and modules proposed should be specific"
                    }
                },
                "Leader": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Leader"
                    },
                    "style": {
                        "role": "Leader",
                        "style": "professional"
                    },
                    "task": {
                        "task": "check the architecture proposed by the architect and give specific comments to improve it"
                    },
                    "rule": {
                        "rule": "comments should be specific and constructive. If there are no other improvements, please make it clear that you are satisfied. "
                    }
                },
                "Architect_2": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Architect"
                    },
                    "style": {
                        "role": "Architect_2",
                        "style": "professional"
                    },
                    "task": {
                        "task": "Modify the designed system based on comments"
                    },
                    "rule": {
                        "rule": "try to specify good open source tools as much as possible and modules proposed should be specific, you don't need to output any extra crap, just the modified system ONLY"
                    },
                    "ExtractComponent": {
                        "extract_words": [
                            "system"
                        ],
                        "system_prompt": "you need to extract the modified system as completely as possible.",
                        "last_prompt": ""
                    }
                }
            }
        },
        "develop_state": {
            "LLM_type": "OpenAI",
            "LLM": {
                "temperature": 0.3,
                "model": "gpt-3.5-turbo-16k-0613",
                "log_path": "logs/god"
            },
            "roles": [
                "Boss",
                "Developer_1",
                "Leader",
                "Developer_2"
            ],
            "controller": {
                "controller_type": "order",
                "max_chat_nums": 5,
                "judge_system_prompt": "",
                "judge_last_prompt": "",
                "judge_extract_words": "end"
            },
            "environment_prompt": "Now the scenario is that the boss puts forward a requirement, the developer writes the code according to the framework given by the architect, and then the leader determines whether the written code is elegant, readable, and runnable, and gives comments, another developer modifies the code to  his satisfaction.",
            "name": "develop_state",
            "begin_role": "Boss",
            "begin_query": "write code for the rock-paper-scissors game",
            "agent_states": {
                "Boss": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Boss"
                    },
                    "style": {
                        "role": "Boss",
                        "style": "august"
                    },
                    "task": {
                        "task": "give a requirement"
                    },
                    "rule": {
                        "rule": "requirement should be clear and specific"
                    }
                },
                "Developer_1": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Developer"
                    },
                    "style": {
                        "role": "Developer",
                        "style": "professional"
                    },
                    "task": {
                        "task": "write elegant, readable, extensible, efficient code"
                    },
                    "rule": {
                        "rule": "The code you write should conform to code standards like PEP8, be modular, easy to read, and maintain. you need to just output the code ONLY"
                    },
                    "CustomizeComponent": {
                        "template": "You need to write code based on the following framework :{system}",
                        "keywords": [
                            "system"
                        ]
                    }
                },
                "Leader": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Leader"
                    },
                    "style": {
                        "role": "Leader",
                        "style": "professional"
                    },
                    "task": {
                        "task": "check the code written by the developer and give specific comments to improve it"
                    },
                    "rule": {
                        "rule": "comments should be specific and constructive"
                    }
                },
                "Developer_2": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Developer"
                    },
                    "style": {
                        "role": "Developer",
                        "style": "professional"
                    },
                    "task": {
                        "task": "Modify the written code based on comments"
                    },
                    "rule": {
                        "rule": "The code you write should conform to code standards like PEP8, be modular, easy to read, and maintain, you need to just output the modified code ONLY"
                    },
                    "ExtractComponent": {
                        "extract_words": [
                            "code"
                        ],
                        "system_prompt": "you need to extract the modified code as completely as possible.",
                        "last_prompt": ""
                    }
                }
            }
        },
        "debug_state": {
            "LLM_type": "OpenAI",
            "LLM": {
                "temperature": 0.3,
                "model": "gpt-3.5-turbo-16k-0613",
                "log_path": "logs/god"
            },
            "roles": [
                "Boss",
                "Debugger",
                "Developer_1",
                "Leader",
                "Developer_2",
                "Coder"
            ],
            "controller": {
                "controller_type": "order",
                "max_chat_nums": 6,
                "judge_system_prompt": "",
                "judge_last_prompt": "",
                "judge_extract_words": "end"
            },
            "environment_prompt": "Now the scenario is that the boss puts forward a requirement, the boss puts forward a requirement, the debugger simulate a compiler and determines whether the written code is runnable or not, and gives comments to the developer, the developer writes code based on the feedback given by the debugger. Then the leader judges whether the final code can meet the boss's requirements and gives comments to the developer to modify the code. Another developer code based on the comments given by the leader. The coder wirte the final code to the file.",
            "name": "debug_state",
            "begin_role": "Boss",
            "begin_query": "make code runnable and more efficient",
            "agent_states": {
                "Boss": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Boss"
                    },
                    "style": {
                        "role": "Boss",
                        "style": "august"
                    },
                    "task": {
                        "task": "give a requirement"
                    },
                    "rule": {
                        "rule": "requirement should be clear and specific"
                    }
                },
                "Debugger": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Debugger"
                    },
                    "style": {
                        "role": "Debugger",
                        "style": "professional"
                    },
                    "task": {
                        "task": "simulate a compiler and debug"
                    },
                    "rule": {
                        "rule": "Please give corrections if there are errors reported, if not give specific comments to improve the code"
                    },
                    "CustomizeComponent": {
                        "template": "You need to debug the following code :{code}",
                        "keywords": [
                            "code"
                        ]
                    }
                },
                "Developer_1": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Developer"
                    },
                    "style": {
                        "role": "Developer",
                        "style": "professional"
                    },
                    "task": {
                        "task": "write elegant, readable, extensible, efficient code"
                    },
                    "rule": {
                        "rule": "The code you write should conform to code standards like PEP8, be modular, easy to read, and maintain, "
                    }
                },
                "Leader": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Leader"
                    },
                    "style": {
                        "role": "Leader",
                        "style": "professional"
                    },
                    "task": {
                        "task": "check the code written by the developer and give specific comments to improve it until you are satisfied"
                    },
                    "rule": {
                        "rule": "comments should be specific and constructive"
                    }
                },
                "Developer_2": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Developer"
                    },
                    "style": {
                        "role": "Developer",
                        "style": "professional"
                    },
                    "task": {
                        "task": "write elegant, readable, extensible, efficient code"
                    },
                    "rule": {
                        "rule": "The code you write should conform to code standards like PEP8, be modular, easy to read, and maintain"
                    }
                },
                "Coder": {
                    "LLM_type": "OpenAI",
                    "LLM": {
                        "temperature": 0.3,
                        "model": "gpt-3.5-turbo-16k-0613",
                        "log_path": "logs/Coder"
                    },
                    "style": {
                        "role": "Coder",
                        "style": "professional"
                    },
                    "CodeComponent": {
                        "file_name": "rps_game.py",
                        "keyword": "code"
                    }
                }
            }
        }
    }
}